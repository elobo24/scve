<?php

namespace App\Http\Controllers\Backend\Access\User;

use App\Models\Access\User\User;
use App\Http\Controllers\Controller;
use Yajra\Datatables\Facades\Datatables;
use App\Http\Requests\Backend\Access\User\StoreUserRequest;
use App\Http\Requests\Backend\Access\User\ManageUserRequest;
use App\Http\Requests\Backend\Access\User\UpdateUserRequest;
use App\Repositories\Backend\Access\User\UserRepositoryContract;
use App\Repositories\Backend\Access\Role\RoleRepositoryContract;
use App\Http\Requests\Backend\Access\User\UpdateUserPasswordRequest;
use App\Repositories\Frontend\Access\User\UserRepositoryContract as FrontendUserRepositoryContract;


class UserController extends Controller
{

    protected $users;

    protected $roles;


    public function __construct(UserRepositoryContract $users, RoleRepositoryContract $roles)
    {
        $this->users = $users;
        $this->roles = $roles;
    }


    public function index(ManageUserRequest $request)
    {
        $usuarios = $this->users->getForDataTable();

        return view('backend.seguridad.index')
        ->with('usuarios', $usuarios);
    }


    public function get(ManageUserRequest $request) {
        return Datatables::of($this->users->getForDataTable($request->get('status'), $request->get('trashed')))
            ->editColumn('confirmed', function($user) {
                return $user->confirmed_label;
            })
            ->addColumn('roles', function($user) {
                $roles = [];

                if ($user->roles()->count() > 0) {
                    foreach ($user->roles as $role) {
                        array_push($roles, $role->name);
                    }

                    return implode("<br/>", $roles);
                } else {
                    return trans('labels.general.none');
                }
            })
            ->addColumn('actions', function($user) {
                return $user->action_buttons;
            })
            ->make(true);
    }


    public function create(ManageUserRequest $request)
    {
        return view('backend.seguridad.create')
            ->withRoles($this->roles->getAllRoles('sort', 'asc', true));
    }


    public function store(StoreUserRequest $request)
    {
        $this->users->create(
            $request->except('assignees_roles'),
            $request->only('assignees_roles')
        );
        notify()->flash('Usuario creado', 'success', [
          'timer' => 3000,
          'text' => ''
        ]);
        return redirect()->route('scve.seguridad.user.index');
    }


    public function edit(User $user, ManageUserRequest $request)
    {
        return view('backend.seguridad.edit')
            ->withUser($user)
            ->withUserRoles($user->roles->lists('id')->all())
            ->withRoles($this->roles->getAllRoles('sort', 'asc', true));
    }


    public function update(User $user, UpdateUserRequest $request)
    {
        $this->users->update($user,
            $request->except('assignees_roles'),
            $request->only('assignees_roles')
        );
        notify()->flash('Usuario actualizado', 'success', [
          'timer' => 3000,
          'text' => ''
        ]);
        return redirect()->route('scve.seguridad.user.index');
    }


    public function destroy(User $user, ManageUserRequest $request)
    {
        $this->users->destroy($user);
        notify()->flash('Usuario eliminado', 'success', [
          'timer' => 3000,
          'text' => ''
        ]);
        return redirect()->back();
    }


    public function delete(User $deletedUser, ManageUserRequest $request)
    {
        $this->users->delete($deletedUser);
        notify()->flash('Usuario eliminado permanentemente', 'success', [
          'timer' => 3000,
          'text' => ''
        ]);
        return redirect()->back();
    }


    public function restore(User $deletedUser, ManageUserRequest $request)
    {
        $this->users->restore($deletedUser);
        notify()->flash('Usuario restaurado', 'success', [
          'timer' => 3000,
          'text' => ''
        ]);
        return redirect()->back();
    }


    public function mark(User $user, $status, ManageUserRequest $request)
    {
        $this->users->mark($user, $status);
        notify()->flash('Usuario actualizado', 'success', [
          'timer' => 3000,
          'text' => ''
        ]);
        return redirect()->back();
    }


    public function deactivated(ManageUserRequest $request)
    {
        return view('backend.seguridad.deactivated');
    }


    public function deleted(ManageUserRequest $request)
    {
        return view('backend.seguridad.deleted');
    }


    public function changePassword(User $user, ManageUserRequest $request)
    {
        return view('backend.seguridad.change-password')
            ->withUser($user);
    }


    public function updatePassword(User $user, UpdateUserPasswordRequest $request)
    {
        $this->users->updatePassword($user, $request->all());
        notify()->flash('ContraseÃ±a actualizada', 'success', [
          'timer' => 3000,
          'text' => ''
        ]);
        return redirect()->route('scve.seguridad.user.index');
    }


	public function loginAs(User $user, ManageUserRequest $request) {
        return $this->users->loginAs($user);
    }


	public function logoutAs() {
        return $this->users->logoutAs();
    }
}
